# Bunnyshell YAML Configuration
kind: Environment
name: aws-kinesis-tf
type: primary
templateVariables: 
    stream_name = "kinesis-stream-{{env.unique}}"
    shard_count = 1
    retention_period = 24  # In hours
    encryption_type = "NONE"  # Can be "NONE" or "KMS"
    kms_key_id = null  # Leave this if using AWS-managed key
    shard_level_metrics = ["IncomingBytes", "OutgoingBytes"]  # List of metrics to enable
    stream_mode = "PROVISIONED"  # Can be "PROVISIONED" or "ON_DEMAND"
    enforce_consumer_deletion = false
    create_timeout = "5m"
    update_timeout = "5m"
    delete_timeout = "5m"
environmentVariables: 
    AWS_ACCESS_KEY_ID: "REQUIRED"
    AWS_SECRET_ACCESS_KEY: "REQUIRED"
    AWS_DEFAULT_REGION: "REQUIRED"
components:
    # Terraform
    - 
        kind: Terraform
        name: lambda
        gitRepo: "https://github.com/aminalali8/aws-kinesis-tf-tpl.git"
        gitBranch: main
        gitApplicationPath: /
        runnerImage: "hashicorp/terraform:1.5"
        deploy:
            - |
                echo <<EOL > terraform.tfvars
                stream_name           = {{ template.vars.stream_name }}
                shard_count           = {{ template.vars.shard_count }}
                retention_period      = {{ template.vars.retention_period }}
                encryption_type       = {{ template.vars.encryption_type }}
                kms_key_id            = {{ template.vars.kms_key_id }}
                shard_level_metrics   = {{ template.vars.shard_level_metrics }}
                stream_mode           = {{ template.vars.stream_mode }}
                enforce_consumer_deletion = {{ template.vars.enforce_consumer_deletion }}
                tags = {
                    Environment = "prod"
                    Project     = "MyKinesisProject"
                }
                aws_region       = "{{env.vars.aws_region}}"
                aws_access_key   = "{{env.vars.aws_access_key}}"
                aws_secret_key   = "{{env.vars.aws_secret_key}}"
                create_timeout   = {{ template.vars.create_timeout }}
                update_timeout   = {{ template.vars.update_timeout }}
                delete_timeout   = {{ template.vars.delete_timeout }}
                EOL
            - "/bns/helpers/terraform/get_managed_backend > zz_backend_override.tf"
            - "terraform init -input=false -no-color"
            - 'terraform apply -input=false -auto-approve -no-color' 
        destroy:
            - |
                echo <<EOL > variables.tfvars
                stream_name           = {{ template.vars.stream_name }}
                shard_count           = {{ template.vars.shard_count }}
                retention_period      = {{ template.vars.retention_period }}
                encryption_type       = {{ template.vars.encryption_type }}
                kms_key_id            = {{ template.vars.kms_key_id }}
                shard_level_metrics   = {{ template.vars.shard_level_metrics }}
                stream_mode           = {{ template.vars.stream_mode }}
                enforce_consumer_deletion = {{ template.vars.enforce_consumer_deletion }}
                tags = {
                    Environment = "prod"
                    Project     = "MyKinesisProject"
                }
                aws_region       = "{{env.vars.aws_region}}"
                aws_access_key   = "{{env.vars.aws_access_key}}"
                aws_secret_key   = "{{env.vars.aws_secret_key}}"
                create_timeout   = {{ template.vars.create_timeout }}
                update_timeout   = {{ template.vars.update_timeout }}
                delete_timeout   = {{ template.vars.delete_timeout }}
                EOL
            - "/bns/helpers/terraform/get_managed_backend > zz_backend_override.tf"
            - "terraform init -input=false -no-color"
            - 'terraform destroy  -input=false -auto-approve -no-color'
